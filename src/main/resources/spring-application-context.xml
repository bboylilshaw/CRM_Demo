<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:annotation-config />
    <context:component-scan base-package="com.hp.crm">
        <!-- Scan all components except for @Controller -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

    <!-- 加载Properties文件 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:jdbc.properties</value>
                <value>classpath*:hibernate.properties</value>
            </list>
        </property>
    </bean>

    <!-- 配置DataSource -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" lazy-init="false">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置连接池的初始值 -->
        <property name="initialSize" value="1" />
        <!-- 配置连接池的最大值 -->
        <property name="maxActive" value="50" />
        <!-- 最大空闲时, 当经过一个高峰之后, 连接池可以将一些用不到的连接释放, 一直减少到maxIdle为止 -->
        <property name="maxIdle" value="5" />
        <!-- 最小空闲时, 当连接少于minIdle时会自动申请一些连接 -->
        <property name="minIdle" value="1" />
        <!-- 当连接池里connection用尽时, 建立一个connection最大等待时间(毫秒), 超时后抛出异常 -->
        <property name="maxWait" value="15000" />
        <property name="poolPreparedStatements" value="true"/>
    </bean>

    <!-- 配置SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <value>com.hp.crm.model</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <!-- 若使用Spring管理Transactions时, 则自动为org.springframework.orm.hibernate4.SpringSessionContext -->
                <!--<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>-->
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="javax.persistence.validation.mode">${javax.persistence.validation.mode}</prop>
            </props>
        </property>
    </bean>

    <!-- 配置一个事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 配置事务，使用代理的方式 -->
    <!--<bean id="transactionProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
        <property name="transactionManager" ref="transactionManager" />
        <property name="transactionAttributes">
            <props>
                <prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="modify*">PROPAGATION_REQUIRED,-myException</prop>
                <prop key="del*">PROPAGATION_REQUIRED</prop>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>-->

    <!-- 导入其他beans.xml配置文件 -->
    <import resource="spring-exception-resolver.xml" />

</beans>